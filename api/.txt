const express = require('express');
const cors = require('cors');
const connectDB = require("./db/db");
const imageDownloader = require('image-downloader');
const fs = require('fs');
const path = require('path');
const Place = require('./models/Place')
const router = require('./routes/index')
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const multer = require('multer');
// // Ensure uploads directory exists
// const uploadsDir = path.join(__dirname, 'uploads');
// if (!fs.existsSync(uploadsDir)) {
//     fs.mkdirSync(uploadsDir);
// }
const app = express();
const jwtSecret = process.env.JWT_SECRET;
const cookieParser = require('cookie-parser');
/* app.use('/uploads',express.static(__dirname+'/uploads'));*/
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));
app.use(express.json());
require('dotenv').config();

app.use(cors({
  credentials: true,
  origin: 'http://localhost:5173',
}));
 
// Connect to MongoDB
connectDB();
app.use(router);

app.get("/try", (req, res) => {
  res.send(" greate you coonected the nodejs with mongo db ");
});
app.get('/api/test', (req,res) => {
  // mongoose.connect(process.env.MONGO_URL);
  res.json('test ok');
});

app.post('/api/upload-by-link', async (req, res) => {
  const { link } = req.body;
  const newName = 'photo' + Date.now() + '.jpg';
  const dest = path.join(__dirname, 'uploads', newName);

  try {
    await imageDownloader.image({
      url: link,
      dest: dest,
    });
    const relativePath = `/uploads/${newName}`; // Create a relative URL for frontend access
    res.json({ message: 'Image downloaded successfully', filePath: relativePath });
  } catch (error) {
    res.status(500).json({ error: 'Failed to download image', details: error.message });
  }
});

const photosMiddleware = multer({dest:'/uploads/'});
app.post('/api/upload', photosMiddleware.array('photos', 100), async (req,res) => {
  const uploadedFiles = [];
  for (let i = 0; i < req.files.length; i++) {
    // const {path,originalname,mimetype} = req.files[i];
    const {path,originalname} = req.files[i];
    const parts = originalname.split('.');
    const ext = parts[parts.length -1];
    const newPath = path + '.' + ext;
    fs.renameSync(path,newPath);
    uploadedFiles.push(newPath.replace('uploads/',''));

    // const url = await uploadToS3(path, originalname, mimetype);
    // uploadedFiles.push(url);
  }
  // res.json(uploadedFiles);
  res.json(req.files);
  
});


// Start the webserver
app.listen(4000, () => {
  console.log(`Server running on port: ${4000}`);
});